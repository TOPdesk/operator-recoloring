*,
*::after,
*::before {
    box-shadow: none !important;
    transition: none !important;
}
body {
    background: var(--background);
}
::selection {
    background: var(--selection) !important;
    color: var(--on-selection) !important;
}
h1 {
    color: var(--on-background);
}
.tdTab {
    /* Aligning content with header, and other cards in topdesk */
    padding: 0 16px;
}
i.loading::before {
    border-color: var(--on-primary) !important;
}
i.loading::after {
    border-color: var(--primary) !important;
}

/*
 * Card toolbar
 */
/* Warning message */
card-header .toolbar .warning.message {
    background: var(--background);
    color: var(--primary);
    border: 1px solid var(--primary);
}
card-header .toolbar .warning.message a {
    color: var(--primary);
}
card-header .toolbar .warning.message a:hover {
    background: var(--primary);
    color: var(--on-primary);
}
/* Button container */
card-header .toolbars .toolbar .split.buttons {
    border: none; /* There's a weird space between the button and the border of the container */
    min-height: unset; /* Re-adjust the height */
}
card-header .toolbars .toolbar .split.buttons .tdButton.iconed::before {
    margin-top: 2px; /* Adjust the icons to sit in the center vertically */
}
/* Buttons */
card-header .toolbars  {
    /*
     * Isolating the toolbars to their own layer.
     * This keeps disabled buttons visible (they have z-index:-1) in the graphical overview.
     * And the z-index: 1 makes sure the menus draw on top of the card content.
     */
    z-index: 1;
}
card-header .toolbars .toolbar .tdButton {
    --bg: var(--background);
    --color: var(--on-background);
    --border-color: var(--on-background);

    background: var(--bg) !important;
    color: var(--color) !important;
    border: 1px solid var(--border-color) !important;
}
card-header .toolbars .toolbar .split.buttons .tdButton:not(:first-child) {
    margin-left: -1px; /* Move adjacent button borders on top of eachother */
}
card-header .toolbars .toolbar .tdButton:hover,
card-header .toolbars .toolbar .tdButton.dropdown.active {
    --bg: var(--on-background);
    --color: var(--background);
    --border-color: var(--on-background);
}
card-header .toolbars .toolbar .tdButton:active {
    --bg: var(--surface);
    --color: var(--on-surface);
    --border-color: var(--on-surface);
}
card-header .toolbars .toolbar .tdButton.primary {
    --bg: var(--primary);
    --color: var(--on-primary);
    --border-color: var(--primary);
}
card-header .toolbars .toolbar .tdButton.primary:hover {
    --bg: var(--primary-muted);
    --color: var(--on-primary);
    --border-color: var(--primary);
}
card-header .toolbars .toolbar .tdButton.primary:active {
    --bg: var(--background);
    --color: var(--primary);
    --border-color: var(--primary);
}
card-header .toolbars .toolbar .tdButton:disabled,
card-header .toolbars .toolbar .tdButton.enabled.active /* View toggle */ {
    --bg: var(--disabled);
    --color: var(--on-disabled);
    --border-color: var(--on-disabled);
    z-index: -1; /* Prefer the border of non-disabled buttons */
}
card-header .toolbars .toolbar .tdButton.iconed::before {
    color: var(--color);
}
card-header .toolbars .toolbar .tdButton:focus-visible {
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
    z-index: 1; /* The outline should be on top of adjacent buttons */
}
/* Dropdown menu */
card-header .toolbars .toolbar .tdButton.dropdown .menu {
    border: none !important;
    border-radius: unset;
}
card-header .toolbars .toolbar .tdButton.dropdown .menu .tdButton.item {
    border: none !important;
    margin-left: unset;
    padding: 8px 16px;

    --bg: var(--surface);
    --color: var(--on-surface);
}
card-header .toolbars .toolbar .tdButton.dropdown .menu .tdButton.item:hover,
card-header .toolbars .toolbar .tdButton.dropdown .menu .tdButton.item.selected {
    --bg: var(--on-surface);
    --color: var(--surface);
}
card-header .toolbars .toolbar .tdButton.dropdown .menu .tdButton.item[disabled="true"] {
    --bg: var(--disabled);
    --color: var(--on-disabled);
}

/*
* General Widget things
*/
.tdWidgetContainer {
    border: none;
}
/* Error indicator. This just pops up in some places */
.state.conflict.icon {
    color: var(--error) !important;
}
/* title/toolbar */
.tdWidgetContainer .toolbar {
    background: var(--surface);
    border: none;
}
.tdWidgetContainer .toolbar .editable-title {
    color: var(--on-background);
}
.tdWidgetContainer .toolbar .toolbarSeparator {
    background: var(--on-surface);
}
.tdWidgetContainer .toolbar .items button.item {
    color: var(--on-surface);
}
.tdWidgetContainer .toolbar .items button.item:hover {
    color: var(--primary);
}
.tdWidgetContainer .toolbar .items button.item:focus-visible {
    outline: 2px solid var(--on-surface);
    outline-offset: -4px;
}
.tdWidgetContainer .toolbar .items button.item[disabled] {
    background: var(--disabled);
    color: var(--on-disabled);
}
.tdWidgetContainer .toolbar .items .filter.item.ui.dropdown > :is(.icon, label) {
    color: var(--text-color);
}
.tdWidgetContainer .toolbar .items .filter.item.ui.dropdown {
    --text-color: var(--on-surface);
}
.tdWidgetContainer .toolbar .items .filter.item.ui.dropdown:hover {
    --text-color: var(--primary);
}
.tdWidgetContainer .toolbar .items .filter.item.ui.dropdown.active {
    background: var(--on-surface);
    --text-color: var(--surface);
    border-bottom-left-radius: 0px;
    border-bottom-right-radius: 0px;
}
.tdWidgetContainer .toolbar .items .filter.item.ui.dropdown.active .menu {
    background: var(--surface);
}
.tdWidgetContainer .toolbar .items .filter.item.ui.dropdown.active .menu .item {
    color: var(--on-surface);
}
.tdWidgetContainer .toolbar .items .filter.item.ui.dropdown.active .menu .item:hover {
    background: var(--on-surface);
    color: var(--surface);
}
.tdWidgetContainer .toolbar .items .filter.item.ui.dropdown.active .menu .item.active:hover {
    /* The .active class does not seem to have a purpose, but forces a background that is equal to normal hover nonetheless */
    background: var(--on-surface) !important;
    color: var(--surface) !important;
}
/* Toolbar popout area */
.tdWidgetContainer .workareas .workarea {
    background: var(--surface);
    border: none;
    border-top: 1px solid var(--on-surface);
}
.tdWidgetContainer .workareas .workarea .body > .icon {
    color: var(--on-surface);
}
.tdWidgetContainer .workareas .workarea :is(.fieldlabels, .message, h4) {
    color: var(--on-surface);
}
.tdWidgetContainer .workareas .workarea .footer {
    border-color: var(--on-surface);
    border-bottom: none;
}
/* Toolbar popout area buttons */
.tdWidgetContainer .workareas .workarea .footer .tdButton {
    --bg: var(--background);
    --color: var(--on-background);
    --border-color: var(--on-background);

    background: var(--bg);
    color: var(--color);
    border-color: var(--border-color);
}
.tdWidgetContainer .workareas .workarea .footer .tdButton.primary {
    --bg: var(--primary);
    --color: var(--on-primary);
    --border-color: var(--primary);
}
.tdWidgetContainer .workareas .workarea .footer .tdButton:focus-visible {
    outline: 2px solid var(--on-surface);
    outline-offset: 2px;
}
.tdWidgetContainer .workareas .workarea .footer .tdButton:hover {
    --bg: var(--on-background);
    --color: var(--background);
    --border-color: var(--on-background);
}
.tdWidgetContainer .workareas .workarea .footer .tdButton:active {
    --bg: var(--surface);
    --color: var(--on-surface);
    --border-color: var(--on-surface);
}
.tdWidgetContainer .workareas .workarea .footer .tdButton:disabled {
    --bg: var(--disabled);
    --color: var(--on-disabled);
    --border-color: var(--on-disabled);
}
/* Inline dropdown, like selects but somehow different */
.tdWidgetContainer .workareas .workarea .field .fields .inline-dropdown {
    color: var(--on-surface);
}
.tdWidgetContainer .workareas .workarea .field .fields .inline-dropdown .text:hover,
.tdWidgetContainer .workareas .workarea .field .fields .inline-dropdown .text:hover + .chevron {
    color: var(--primary);
}
.tdWidgetContainer .workareas .workarea .field .fields .inline-dropdown:focus-visible {
    outline: 2px solid var(--on-surface);
    outline-offset: 2px;
}
.tdWidgetContainer .workareas .workarea .field .fields .inline-dropdown .menu {
    background: var(--background);
    border: 1px solid var(--on-background);;
    border-radius: 0px;

    left: unset;
    right: unset;
}
.tdWidgetContainer .workareas .workarea .field .fields .inline-dropdown .menu .item {
    background: var(--background);
    color: var(--on-background);
}
.tdWidgetContainer .workareas .workarea .field .fields .inline-dropdown .menu .item.selected {
    background: var(--primary);
    color: var(--on-primary);
}
.tdWidgetContainer .workareas .workarea .field .fields .inline-dropdown .menu .item:hover {
    background: var(--on-background);
    color: var(--background);
}
/* Checkboxes, also slightly different then in widget content for some reason */
.tdWidgetContainer .workareas .workarea .field .checkboxButton {
    background: var(--background);
    border-color: var(--on-background);
}
.tdWidgetContainer .workareas .workarea .field .checkboxButton .check {
    color: var(--on-background);
}
.tdWidgetContainer .workareas .workarea .field .checkboxButton:focus-within {
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
}
/* Empty widget */
.tdWidgetContainer:not([data-handle="relationshipWidget"]) .widget > .empty :is(.icon, span) {
    /* see the relationship widget for the reason of the exception here */
    color: var(--on-background);
}

/*
 * Fields
 */
/* labels */
.field .fieldlabels {
    color: var(--on-background);
}
.field .fieldlabels.error {
    color: var(--error);
}
/* text field */
.field .fields.textField :where(input, textarea) {
    background: var(--background);
    color: var(--on-background);
    border-color: var(--on-background);
}
.field .fields.textField :where(input, textarea).error {
    background: var(--background);
    color: var(--error);
    border-color: var(--error);
}
.field .fields.textField :where(input, textarea):focus {
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
}
/* select */
.field .fields.suggestField .selection {
    --color: var(--on-background);

    background: var(--background);
    color: var(--color);
    border-color: var(--on-background);
}
.field .fields.suggestField .selection.error {
    --color: var(--error);

    background: var(--background);
    border-color: var(--error);
}
.field .fields.suggestField .selection .chevron {
    color: var(--color);
}
.field .fields.suggestField .selection input {
    color: var(--color);
    outline: none;
}
.field .fields.suggestField .selection .text {
    color: var(--color);
    opacity: revert;
}
.field .fields.suggestField .selection .text.clickable::after {
    color: var(--primary);
    border-color: var(--primary);
    opacity: revert;
}
.field .fields.suggestField .selection:focus-within {
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
}
.field .fields.suggestField .selection .menu {
    border-radius: 0;
    border: 1px solid var(--on-background);
}
.field .fields.suggestField .selection .menu .item {
    --bg: var(--background);
    --color: var(--on-background);
    border: none;

    background: var(--bg);
    color: var(--color);
    padding: 8px;
}
.field .fields.suggestField .selection .menu .item .icon {
    color: var(--color) !important;
}
.field .fields.suggestField .selection .menu .item.selected {
    --bg: var(--primary);
    --color: var(--on-primary);
}
.field .fields.suggestField .selection .menu .item .inactive {
    --color: var(--disabled);
}
.field .fields.suggestField .selection .menu .item:hover {
    --bg: var(--on-background);
    --color: var(--background);
}
.field .fields.suggestField .selection .menu .item > .overflow {
    color: var(--on-background);
    border-color: var(--on-background);
}
.field .fields.suggestField .selection .message {
    background: var(--background);
    color: var(--on-background);
}
.field .fields.suggestField .selection .placeholder {
    color: var(--on-background);
}
/* Checkbox */
.field .fields.checkboxField .checkboxButton {
    --color: var(--on-background);

    background: var(--background);
    border-color: var(--on-background);
}
.field .fields.checkboxField .checkboxButton.disabled {
    --color: var(--on-disabled);

    background: var(--disabled);
    border-color: var(--on-disabled);
}
.field .fields.checkboxField .checkboxButton.checked.disabled {
    --color: var(--on-background);

    background: var(--background);
    border-color: var(--background);
}
.field .fields.checkboxField .checkboxButton .check {
    color: var(--color);
}
.field .fields.checkboxField .checkboxButton:focus-within {
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
}
/* Numberfield */
.field .fields.numberField .inputWithDecorationContainer {
    --bg: var(--background);
    --color: var(--on-background);
    --border: var(--on-background);
}
.field .fields.numberField .inputWithDecorationContainer.error {
    --bg: var(--background);
    --color: var(--error);
    --border: var(--error);
}
.field .fields.numberField input {
    background: var(--bg);
    color: var(--color);
    border-color: var(--border);
}
.field .fields.numberField :where(.pre, .post) {
    color: var(--color) !important;
}
.field .fields.numberField input:focus {
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
}
/* Datetimefield */
.field .fields.dateTimeField {
    --bg: var(--background);
    --color: var(--on-background);
    --border: var(--on-background);
}
.field[aria-invalid="true"] .fields.dateTimeField {
    --bg: var(--background);
    --color: var(--error);
    --border: var(--error);
}
.field .fields.dateTimeField :where(.dateField, .timeField) {
    border: 1px solid var(--border);
}
.field .fields.dateTimeField input {
    background: var(--bg);
    color: var(--color);
    border: none;
}
.field .fields.dateTimeField .timeField {
    border-left: none;
}
.field .fields.dateTimeField .timeField .icon.time {
    color: var(--color);
}
.field .fields.dateTimeField input::placeholder {
    color: var(--color);
}
.field .fields.dateTimeField :where(.dateField, .timeField):focus-within {
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
}
/* time field layout fix, i.e. place clock icon inside field */
.field .fields.dateTimeField .dateField {
    flex: revert;
    flex-grow: 1;
}
.field .fields.dateTimeField .timeField {
    flex: revert;
    width: 9ch;

    display: flex;
    flex-direction: row-reverse;
}
.field .fields.dateTimeField .timeField input {
    padding-right: 3px;
}
.field .fields.dateTimeField .timeField .handle {
    background: var(--bg);
    display: flex;
    align-items: center;
    padding-left: 3px;
}
.field .fields.dateTimeField .timeField .handle .icon.time {
    margin-top: 2px;
    margin-right: -2px;
}
/* date field datepicker */
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar {
    background: var(--surface);
    border-color: var(--surface);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar {
    background: var(--surface);
    border-left-color: var(--on-surface);
    border-bottom-color: var(--surface);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .daterangepicker_input input {
    border-color: var(--on-background) !important;
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .daterangepicker_input::after {
    color: var(--on-background);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .tdActionButton .icon {
    background: var(--background);
    color: var(--on-background);
    border-color: var(--on-background);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .tdActionButton:hover .icon {
    background: var(--on-background);
    color: var(--background);
    border-color: var(--on-background);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .tdActionButton:active .icon {
    background: var(--surface);
    color: var(--on-surface);
    border-color: var(--on-surface);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar select {
    background: var(--background);
    color: var(--on-background);
    border-color: var(--on-background);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar select:focus {
    border-color: var(--on-background);
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .calendar-table th,
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .calendar-table td.week {
    color: var(--on-surface);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .calendar-table td.available {
    background: var(--background);
    color: var(--on-background);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .calendar-table tr:first-of-type td.available {
    border-top: 1px solid var(--on-surface);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .calendar-table tr:last-of-type td.available {
    border-bottom: 1px solid var(--on-surface);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .calendar-table td:nth-of-type(2) {
    border-left: 1px solid var(--on-surface);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .calendar-table td:last-of-type {
    border-right: 1px solid var(--on-surface);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .calendar-table td.weekend {
    background: var(--surface);
    color: var(--on-surface);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .calendar-table td:not(.off) {
    font-weight: bold;
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .calendar-table td.today::before {
    border-color: currentColor;
    border-radius: 50%;
    aspect-ratio: 1;
    inset: 2px;
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .calendar-table td.in-range {
    background: var(--primary);
    color: var(--on-primary);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .calendar-table td.start-date,
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .calendar-table td.end-date {
    background: var(--primary-muted);
    color: var(--on-primary);
}
.field .fields.dateTimeField .daterangepicker.dropdown-menu.show-calendar .calendar .calendar-table td.available:hover {
    background: var(--on-background);
    color: var(--background);
}

/*
 * General widget
 */
/* collapsed ID and specification */
.tdWidgetContainer[data-handle="generalWidget"] section > label {
    color: var(--on-background) !important;
}
/* edit button */
.tdWidgetContainer[data-handle="generalWidget"] .tdActionButton.expand .icon {
    background: var(--bg);
    color: var(--pen);
    border-color: var(--circle);
}
.tdWidgetContainer[data-handle="generalWidget"] .tdActionButton.expand {
    --bg: var(--background);
    --pen: var(--on-background);
    --circle: var(--on-background);
}
.tdWidgetContainer[data-handle="generalWidget"] .tdActionButton.expand:hover {
    --bg: var(--on-background);
    --pen: var(--background);
    --circle: var(--on-background);
}
.tdWidgetContainer[data-handle="generalWidget"] .tdActionButton.expand:active {
    --bg: var(--surface);
    --pen: var(--on-surface);
    --circle: var(--on-surface);
}
.tdWidgetContainer[data-handle="generalWidget"] .tdActionButton.expand:focus-visible {
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
}
/* status display */
.tdWidgetContainer[data-handle="generalWidget"] .status-display :is(.text, .icon, .status.label) {
    color: var(--on-background);
}
.tdWidgetContainer[data-handle="generalWidget"] .status-display .dropdown .menu {
    border-radius: 0;
    border: none;
}
.tdWidgetContainer[data-handle="generalWidget"] .status-display .dropdown .menu .item {
    background: var(--surface);
    color: var(--on-surface);
    padding: 8px 4px;
    border: 2px solid var(--surface);
}
.tdWidgetContainer[data-handle="generalWidget"] .status-display .dropdown .menu .item.selected {
    background: var(--background);
    color: var(--primary);
    border-color: var(--surface);
}
.tdWidgetContainer[data-handle="generalWidget"] .status-display .dropdown .menu .item:hover {
    background: var(--on-surface);
    color: var(--surface);
    border-color: var(--on-surface);
}
/* status switch */
.tdWidgetContainer[data-handle="generalWidget"] .status-switch label {
    background: var(--border) !important;
}
.tdWidgetContainer[data-handle="generalWidget"] .status-switch label::before {
    background: var(--bg) !important;
}
.tdWidgetContainer[data-handle="generalWidget"] .status-switch label::after {
    box-shadow: inset 0 0 0 2px var(--thumb-border) !important;
    background: var(--thumb-bg) !important;
    color: var(--thumb-icon) !important;
    margin-left: revert !important;

    /* Replace switch transition with a more performant one */
    transition: transform 0.2s ease-in-out !important;
}
.tdWidgetContainer[data-handle="generalWidget"] .status-switch input[type="checkbox"]:checked + label::after {
    transform: translateX(24px);
}
.tdWidgetContainer[data-handle="generalWidget"] .status-switch {
    --border: var(--on-background);
    --bg: var(--background);

    --thumb-bg: var(--on-background);
    --thumb-icon: var(--background);
    --thumb-border: var(--thumb-bg);
}
.tdWidgetContainer[data-handle="generalWidget"] .status-switch.impacted {
    --thumb-bg: var(--error);
    --thumb-icon: var(--on-error);
}
.tdWidgetContainer[data-handle="generalWidget"] .status-switch[disabled="true"] {
    --border: var(--on-disabled);
    --bg: var(--disabled);

    --thumb-bg: var(--background);
    --thumb-icon: var(--on-background);
    --thumb-border: var(--on-background);
}
.tdWidgetContainer[data-handle="generalWidget"] .status-switch.impacted[disabled="true"] {
    --thumb-icon: var(--error);
    --thumb-border: var(--error);
}
/* asset icon */
.tdWidgetContainer[data-handle="generalWidget"] .icon.assettype {
    color: var(--on-background) !important;
    border-color: var(--on-background) !important; /* separator */
}

/*
 * History widget
 */
.tdWidgetContainer[data-handle="historyWidget"] .togglebuttons {
    border-color: var(--on-background);
}
/* buttons */
.tdWidgetContainer[data-handle="historyWidget"] button.tdButton {
    background: var(--background);
    color: var(--on-background);
    border-color: var(--on-background);
}
.tdWidgetContainer[data-handle="historyWidget"] button.tdButton.active {
    background: var(--primary);
    color: var(--on-primary);
    border-color: var(--primary);
}
.tdWidgetContainer[data-handle="historyWidget"] button.tdButton:hover {
    background: var(--on-background);
    color: var(--background);
    border-color: var(--on-background);
}
.tdWidgetContainer[data-handle="historyWidget"] button.tdButton:active {
    background: var(--surface);
    color: var(--on-surface);
    border-color: var(--on-surface);
}
.tdWidgetContainer[data-handle="historyWidget"] button.tdButton:focus-visible {
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
}
/* feed */
.tdWidgetContainer[data-handle="historyWidget"] h4 {
    color: var(--on-background);
}
.tdWidgetContainer[data-handle="historyWidget"] .feed .label .icon {
    color: var(--on-background);
}
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event:not(:last-of-type) {
    margin-bottom: 16px; /* Spread each record a bit for readability */
}
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .summary .act {
    /* If summary spills into multiple lines, subsequent lines get a little indent */
    text-indent: -8px;
    padding-left: 8px;
}
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .summary .description {
    font-weight: normal; /* allow the user to "pop" */
}
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .summary :is(.user, .description, .date),
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .eventdetail.fieldModified :is(.fieldname, .decorator, .value),
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .eventdetail.list .item,
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .eventdetail.list .item .icon.small,
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .eventdetail.list .item .content a {
    color: var(--on-background);
}
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .eventdetail.fieldModified .value.new,
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .eventdetail.list .item .content .briefDescription > span:last-of-type,
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .eventdetail.list .item .content a {
    color: var(--primary);
}
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .eventdetail.list .item .content {
    line-height: revert; /* "Reason: ..." takes a lot of vertical space */
}
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .eventdetail.list .item .content .content {
    padding-top: revert; /* "Reason: ..." takes a lot of vertical space */
}
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .eventdetail.list .item .content > * {
    padding-left: 8px;
}
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .eventdetail.list .item .content > *:first-child {
    padding-left: revert;
}
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .eventdetail.list .item .content a {
    text-decoration: underline;
}
.tdWidgetContainer[data-handle="historyWidget"] .history.widget .feed .event .eventdetail.list .item .content a:hover {
    color: var(--primary-muted);
}
/* pagination */
.tdWidgetContainer[data-handle="historyWidget"] .pagination :is(.items-summary, .items-summary__number, p) {
    color: var(--on-background);
}

/*
 * Relationship widget
 *
 * This widget can't be styled at the moment. The asset part of the widget uses a custom element with shadow DOM that
 * can not (yet) be styled with Stylus (https://github.com/openstyles/stylus/issues/739).
 *
 * And for some reason the custom element root itself does not take a background color, so the whole widget must be
 * reset to the original background color.
 *
 * Styling only the services part would then make the widget become disjointed.
 */
.tdWidgetContainer[data-handle="relationshipWidget"] .relationship.widget {
    background: white;
}

/*
 * Assignment widget
 */
.tdWidgetContainer[data-handle="assignmentWidget"] h4 {
    color: var(--on-background);
}
/* items */
.tdWidgetContainer[data-handle="assignmentWidget"] .tdContentList .item {
    --bg: var(--background);
    --color: var(--on-background);
    --border-color: var(--background);

    border-color: var(--border-color) !important;
    background: var(--bg) !important;
}
.tdWidgetContainer[data-handle="assignmentWidget"] .tdContentList .item.selected {
    --border-color: var(--primary);
}
.tdWidgetContainer[data-handle="assignmentWidget"] .tdContentList .item:hover {
    --bg: var(--on-background);
    --color: var(--background);
    --border-color: var(--on-background);
}
.tdWidgetContainer[data-handle="assignmentWidget"] .tdContentList .item:active {
    --bg: var(--surface);
    --color: var(--on-surface);
    --border-color: var(--on-surface);
}
.tdWidgetContainer[data-handle="assignmentWidget"] .tdContentList .item:focus-visible {
    outline: 2px solid var(--on-background) !important;
    outline-offset: 2px;
}
.tdWidgetContainer[data-handle="assignmentWidget"] .tdContentList .item .icon {
    color: var(--color);
}
.tdWidgetContainer[data-handle="assignmentWidget"] .tdContentList .item .content > .details {
    color: var(--color);
}
.tdWidgetContainer[data-handle="assignmentWidget"] .tdContentList .item .content > a {
    color: var(--color);
    text-decoration: underline;
}
.tdWidgetContainer[data-handle="assignmentWidget"] .tdContentList .item .content > a:hover {
    background: var(--primary);
    color: var(--on-primary);
}

/*
 * Dataset widget
 */
.tdWidgetContainer[data-handle="gridWidget"] table.tdGrid {
    border-top: 1px solid var(--on-surface);
}
.tdWidgetContainer[data-handle="gridWidget"] table.tdGrid :is(tbody, tr, th, td) {
    border: none;
}
.tdWidgetContainer[data-handle="gridWidget"] table.tdGrid thead {
    background: var(--surface);
    border-bottom: 1px solid var(--on-surface);
}
.tdWidgetContainer[data-handle="gridWidget"] table.tdGrid thead th {
    color: var(--on-surface);
}
.tdWidgetContainer[data-handle="gridWidget"] table.tdGrid tbody {
    --bg: var(--background);
    --color: var(--on-background);
}
.tdWidgetContainer[data-handle="gridWidget"] table.tdGrid tbody tr {
    background: var(--bg) !important;
}
.tdWidgetContainer[data-handle="gridWidget"] table.tdGrid tbody tr.selected {
    --bg: var(--primary-muted);
    --color: var(--on-primary);
}
.tdWidgetContainer[data-handle="gridWidget"] table.tdGrid tbody tr:hover {
    --bg: var(--on-background);
    --color: var(--background);
}
.tdWidgetContainer[data-handle="gridWidget"] table.tdGrid tbody td {
    color: var(--color);
}
.tdWidgetContainer[data-handle="gridWidget"] table.tdGrid tbody td .checkboxButton {
    background: var(--background);
    border-color: var(--on-background);
}
.tdWidgetContainer[data-handle="gridWidget"] table.tdGrid tbody td .checkboxButton .check {
    color: var(--on-background);
}

/*
 * Documents widget
 */
 /* File drop area */
.tdWidgetContainer[data-handle="documentWidget"] .workarea .fileDropArea {
    background: var(--background);
    color: var(--on-background);
    border-color: var(--on-background);
}
.tdWidgetContainer[data-handle="documentWidget"] .workarea .fileDropArea.drag-over {
    color: var(--primary);
    border-color: var(--primary);
}
.tdWidgetContainer[data-handle="documentWidget"] .workarea .fileDropArea .tdButton {
    background: var(--background);
    color: var(--on-background);
    border-color: var(--on-background);
}
.tdWidgetContainer[data-handle="documentWidget"] .workarea .fileDropArea .tdButton:hover {
    background: var(--on-background);
    color: var(--background);
    border-color: var(--on-background);
}
.tdWidgetContainer[data-handle="documentWidget"] .workarea .fileDropArea .tdButton:active {
    background: var(--surface);
    color: var(--on-surface);
    border-color: var(--on-surface);
}
/* Files to upload */
.tdWidgetContainer[data-handle="documentWidget"] .workarea .list .item {
    border-bottom: none;
}
.tdWidgetContainer[data-handle="documentWidget"] .workarea .list .item > :is(.icon, .content) {
    color: var(--on-surface);
}
.tdWidgetContainer[data-handle="documentWidget"] .workarea .list .item .tdActionButton {
    --bg: var(--background);
    --color: var(--on-background);
    --border-color: var(--on-background);
}
.tdWidgetContainer[data-handle="documentWidget"] .workarea .list .item .tdActionButton:hover {
    --bg: var(--on-background);
    --color: var(--background);
    --border-color: var(--on-background);
}
.tdWidgetContainer[data-handle="documentWidget"] .workarea .list .item .tdActionButton:active {
    --bg: var(--surface);
    --color: var(--on-surface);
    --border-color: var(--on-surface);
}
.tdWidgetContainer[data-handle="documentWidget"] .workarea .list .item .tdActionButton .icon {
    background: var(--bg) !important;
    color: var(--color) !important;
    border-color: var(--border-color) !important;
}
/* File upload progress */
.tdWidgetContainer[data-handle="documentWidget"] .workarea .progress {
    background: var(--background);
    border: 1px solid var(--on-background);
}
.tdWidgetContainer[data-handle="documentWidget"] .workarea .progress .bar {
    background: repeating-linear-gradient(
        -45deg,
        var(--primary) 0px,
        var(--primary) 16px,
        var(--primary-muted) 16px,
        var(--primary-muted) 32px);
}
.tdWidgetContainer[data-handle="documentWidget"] .workarea .progress.error .bar {
    background: var(--error) !important;
}
/* document list */
.tdWidgetContainer[data-handle="documentWidget"] .tdContentList .item {
    --bg: var(--background);
    --color: var(--on-background);
    --border-color: var(--background);

    border-color: var(--border-color) !important;
    background: var(--bg) !important;
}
.tdWidgetContainer[data-handle="documentWidget"] .tdContentList .item.selected {
    --border-color: var(--primary);
}
.tdWidgetContainer[data-handle="documentWidget"] .tdContentList .item:hover {
    --bg: var(--on-background);
    --color: var(--background);
    --border-color: var(--on-background);
}
.tdWidgetContainer[data-handle="documentWidget"] .tdContentList .item:active {
    --bg: var(--surface);
    --color: var(--on-surface);
    --border-color: var(--on-surface);
}
.tdWidgetContainer[data-handle="documentWidget"] .tdContentList .item:focus-visible {
    outline: 2px solid var(--on-background) !important;
    outline-offset: 2px;
}
.tdWidgetContainer[data-handle="documentWidget"] .tdContentList .item .icon {
    color: var(--color);
}
.tdWidgetContainer[data-handle="documentWidget"] .tdContentList .item .content > .details {
    color: var(--color);
}
.tdWidgetContainer[data-handle="documentWidget"] .tdContentList .item .content a {
    color: var(--color);
    text-decoration: underline;
}
.tdWidgetContainer[data-handle="documentWidget"] .tdContentList .item .content a:hover {
    background: var(--primary);
    color: var(--on-primary);
}

/*
* Relationship grid widget
*/
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode {
    margin: 0;
}
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode .header {
    padding: 12px 16px;
    background: var(--surface);
    margin: 0;
    border-top: 1px solid var(--on-surface);
}
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode .header :is(.icon, h4) {
    color: var(--on-surface);
}
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode table.tdGrid {
    border: none;
    border-top: 1px solid var(--on-surface);
}
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode table.tdGrid :is(tbody, tr, th, td) {
    border: none;
}
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode table.tdGrid thead {
    background: var(--surface);
    border-bottom: 1px solid var(--on-surface);
}
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode table.tdGrid thead th {
    padding: 12px 16px;
    color: var(--on-surface);
}
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode table.tdGrid tbody {
    --bg: var(--background);
    --color: var(--on-background);
}
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode table.tdGrid tbody tr {
    background: var(--bg) !important;
}
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode table.tdGrid tbody tr.selected {
    --bg: var(--primary-muted);
    --color: var(--on-primary);
}
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode table.tdGrid tbody tr:hover {
    --bg: var(--on-background);
    --color: var(--background);
}
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode table.tdGrid tbody td {
    padding: 6px 16px;
    color: var(--color);
}
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode table.tdGrid tbody td .row-element :is(.icon, .details) {
    color: var(--color);
}
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode table.tdGrid tbody td .checkboxButton {
    background: var(--background);
    border-color: var(--on-background);
}
.tdWidgetContainer[data-handle="relationshipGridWidget"] .content-card-mode table.tdGrid tbody td .checkboxButton .check {
    color: var(--on-background);
}

/*
* Reservations widget
*/
.tdWidgetContainer[data-handle="reservationsWidget"] .reservations.widget h4 {
    color: var(--on-background);
}
.tdWidgetContainer[data-handle="reservationsWidget"] .reservations.widget .column + .column {
    border-color: var(--on-background);
}
/* switch label */
.tdWidgetContainer[data-handle="reservationsWidget"] .reservations.widget .row span {
    color: var(--on-background);
}
/* switch control */
.tdWidgetContainer[data-handle="reservationsWidget"] .toggle label {
    background: var(--border) !important;
}
.tdWidgetContainer[data-handle="reservationsWidget"] .toggle label::before {
    background: var(--bg) !important;
}
.tdWidgetContainer[data-handle="reservationsWidget"] .toggle label::after {
    box-shadow: inset 0 0 0 1px var(--thumb-border) !important;
    background: var(--thumb-bg) !important;
    color: var(--thumb-icon) !important;
    margin-left: revert !important;

    /* Replace switch transition with a more performant one */
    transition: transform 0.2s ease-in-out !important;
}
.tdWidgetContainer[data-handle="reservationsWidget"] .toggle input[type="checkbox"]:checked + label::after {
    transform: translateX(12px);
}
.tdWidgetContainer[data-handle="reservationsWidget"] .toggle {
    --border: var(--on-background);
    --bg: var(--background);

    --thumb-bg: var(--on-background);
    --thumb-border: var(--thumb-bg);
}
.tdWidgetContainer[data-handle="reservationsWidget"] .toggle.disabled {
    --border: var(--on-disabled);
    --bg: var(--disabled);

    --thumb-bg: var(--disabled);
    --thumb-border: var(--on-disabled);
}

/*
 * Graphical overview
 */
body .card.takeoverMode {
    background: var(--background);
}
body .card.takeoverMode card-header {
    background: none;
}
body .card.takeoverMode .graphicalOverview .nodes .node circle {
    stroke: unset;
    fill: unset;
}
body .card.takeoverMode .graphicalOverview .nodes .node,
body .card.takeoverMode .graphicalOverview .nodes .node .action {
    --bg: var(--background);
    --icon: var(--on-background);
    --border: var(--on-background);
}
body .card.takeoverMode .graphicalOverview .nodes .node:hover,
body .card.takeoverMode .graphicalOverview .nodes .node .action:hover {
    --bg: var(--on-background);
    --icon: var(--background);
    --border: var(--on-background);
}
body .card.takeoverMode .graphicalOverview .nodes .node:active,
body .card.takeoverMode .graphicalOverview .nodes .node .action:active {
    --bg: var(--surface);
    --icon: var(--on-surface);
    --border: var(--on-surface);
}
/* Node */
body .card.takeoverMode .graphicalOverview .nodes .node circle.invisible {
    fill: var(--bg);
}
body .card.takeoverMode .graphicalOverview .nodes .node circle.highlight {
    fill: var(--on-background);
}
body .card.takeoverMode .graphicalOverview .nodes .node circle.nodeborder {
    fill: var(--bg);
    stroke: var(--border);
    stroke-width: 1px;
}
body .card.takeoverMode .graphicalOverview .nodes .node circle.selectable {
    stroke: var(--primary);
    stroke-width: 3px;
}
body .card.takeoverMode .graphicalOverview .nodes .node circle.selectable:not([r="0"]) ~ circle.nodeborder {
    --border: var(--background);
}
body .card.takeoverMode .graphicalOverview .nodes .node circle.red {
    stroke: var(--error); /* impacted node */
    fill: var(--bg);
}
/* Node action */
body .card.takeoverMode .graphicalOverview .nodes .node .action circle {
    fill: var(--bg);
    stroke: var(--border);
}
/* icon */
body .card.takeoverMode .graphicalOverview .nodes .node use {
    fill: var(--icon);
}
/* Node label */
body .card.takeoverMode .graphicalOverview .nodes .nodeLabel rect {
    fill: var(--surface);
}
body .card.takeoverMode .graphicalOverview .nodes .nodeLabel text {
    fill: var(--on-surface);
}
/* Edges */
body .card.takeoverMode .graphicalOverview .edges path {
    stroke: var(--on-background);
}
body .card.takeoverMode .graphicalOverview .paths text {
    stroke: var(--on-background);
}
body .card.takeoverMode .graphicalOverview .arrowLabels textPath {
    fill: var(--on-background);
}

/*
 * Graphical overview sidebar
 */
body .card.takeoverMode .cardPreview .header {
    background: var(--surface);
    border-color: var(--on-surface);
}
body .card.takeoverMode .cardPreview .header :is(.previewTitle, .previewSubTitle) {
    color: var(--on-surface);
}
body .card.takeoverMode .cardPreview .header .close {
    --bg: var(--background);
    --color: var(--on-background);
    --border-color: var(--on-background);
}
body .card.takeoverMode .cardPreview .header .close:hover {
    --bg: var(--on-background);
    --color: var(--background);
    --border-color: var(--on-background);
}
body .card.takeoverMode .cardPreview .header .close:active {
    --bg: var(--surface);
    --color: var(--on-surface);
    --border-color: var(--on-surface);
}
body .card.takeoverMode .cardPreview .header .close .icon {
    background: var(--bg);
    color: var(--color);
    border-color: var(--border-color);
}
body .card.mini .fieldset.widget .field .fieldlabels {
    color: var(--on-background);
}

/*
 * Feedback button
 */
button.feedback {
    background: var(--background);
    color: var(--primary);
    border-color: var(--primary);
}
button.feedback:hover {
    background: var(--on-background);
    color: var(--background);
    border-color: var(--background);
}
button.feedback:focus {
    background: var(--background);
    color: var(--primary);
    border-color: var(--primary);
}
button.feedback:active {
    background: var(--primary);
    color: var(--on-primary);
    border-color: var(--primary);
}
button.feedback:focus-visible {
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
}
button.feedback::before,
button.feedback::after {
    display: none;
}
/* Feedback popup / action popups */
.tdOverlay {
    background: var(--surface);
}
.tdOverlay .header {
    background: var(--surface);
    color: var(--on-surface);
    border-color: var(--on-surface);
}
.tdOverlay .header .close .icon{
    background: var(--background);
    color: var(--on-background);
    border-color: var(--on-background);
}
.tdOverlay .header .close:hover .icon{
    background: var(--on-background);
    color: var(--background);
    border-color: var(--on-background);
}
.tdOverlay .header .close:active .icon{
    background: var(--surface);
    color: var(--on-surface);
    border-color: var(--on-surface);
}
.tdOverlay .footer {
    background: var(--surface);
    color: var(--on-surface);
    border-color: var(--on-surface);
}
.tdOverlay .footer > span {
    color: var(--on-surface) !important;
}
.tdOverlay .footer .conflict.icon {
    color: var(--error) !important;
}
.tdOverlay .footer .tdButton {
    --bg: var(--background);
    --color: var(--on-background);
    --border-color: var(--on-background);

    background: var(--bg) !important;
    color: var(--color) !important;
    border-color: var(--border-color) !important;

    transition: none;
}
.tdOverlay .footer .tdButton:hover {
    --bg: var(--on-background);
    --color: var(--background);
    --border-color: var(--on-background);
}
.tdOverlay .footer .tdButton:active {
    --bg: var(--surface);
    --color: var(--on-surface);
    --border-color: var(--on-surface);
}
.tdOverlay .footer .tdButton.primary {
    --bg: var(--primary);
    --color: var(--on-primary);
    --border-color: var(--primary);
}
.tdOverlay .footer .tdButton.primary:hover {
    --bg: var(--primary-muted);
    --color: var(--on-primary);
    --border-color: var(--primary-muted);
}
.tdOverlay .footer .tdButton.primary:active {
    --bg: var(--on-primary);
    --color: var(--primary);
    --border-color: var(--primary);
}
.tdOverlay .footer .tdButton.destructive {
    --bg: var(--error);
    --color: var(--on-error);
    --border-color: var(--error);
}
.tdOverlay .footer .tdButton.destructive:hover {
    --bg: var(--on-background);
    --color: var(--background);
    --border-color: var(--on-background);
}
.tdOverlay .footer .tdButton.destructive:active {
    --bg: var(--on-error);
    --color: var(--error);
    --border-color: var(--error);
}
.tdOverlay .footer .tdButton[disabled] {
    --bg: var(--disabled);
    --color: var(--on-disabled);
    --border-color: var(--on-disabled);
}
/* delete popup and confirmation popup */
.tdOverlay .body .instruction p,
.tdOverlay .body .instruction .icon {
    color: var(--on-surface) !important;
}
/* archive popup */
.tdOverlay.confirmArchive .instruction,
.tdOverlay.confirmArchive .fieldlabels {
    color: var(--on-surface);
}
.tdOverlay.confirmArchive .dropdown {
    background: var(--background);
    color: var(--on-background);
    border-color: var(--on-background);
}
.tdOverlay.confirmArchive .dropdown:focus {
    outline: 2px solid var(--on-surface);
    outline-offset: 2px;
}
.tdOverlay.confirmArchive .dropdown .text {
    color: var(--on-background);
    opacity: 1;
}
.tdOverlay.confirmArchive .dropdown .menu {
    background: var(--surface);
    border-color: var(--on-surface);
}
.tdOverlay.confirmArchive .dropdown .menu .item {
    padding: 4px;
    color: var(--on-surface);
    border: none;
}
.tdOverlay.confirmArchive .dropdown .menu .item.selected {
    background: var(--primary);
    color: var(--on-primary);
}
.tdOverlay.confirmArchive .dropdown .menu .item:hover {
    background: var(--on-surface);
    color: var(--surface);
}

/***************
 * DESIGN MODE *
 ***************/

card-header .editable-title {
    color: var(--on-background);
}

/*
 * card/widget title edit
 */
:is(card-header, .toolbar.designmode) .editable-title .tdActionButton {
    --bg: var(--background);
    --color: var(--on-background);
    --border-color: var(--on-background);
}
:is(card-header, .toolbar.designmode) .editable-title .tdActionButton:hover {
    --bg: var(--on-background);
    --color: var(--background);
    --border-color: var(--on-background);
}
:is(card-header, .toolbar.designmode) .editable-title .tdActionButton:active {
    --bg: var(--surface);
    --color: var(--on-surface);
    --border-color: var(--on-surface);
}
:is(card-header, .toolbar.designmode) .editable-title .tdActionButton:focus-visible {
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
}
:is(card-header, .toolbar.designmode) .editable-title .tdActionButton .icon {
    background: var(--bg) !important;
    color: var(--color) !important;
    border-color: var(--border-color) !important;
}
:is(card-header, .toolbar.designmode) .editable-title input {
    background: var(--background) !important;
    color: var(--on-background) !important;
    border-color: var(--on-background) !important;
}
:is(card-header, .toolbar.designmode) .editable-title input:focus {
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
}

/*
 * Drag handles
 */
 .dragHandle .icon {
    color: var(--color) !important;
}
.dragHandle:hover {
    --color: var(--primary) !important;
}
/* Field drag handle */
.tdWidgetContainer[data-handle="fieldSetWidget"] .dragHandle {
    --color: var(--on-background);
}

/* Dragging widget background */
.tdWidgetContainer.being-dragged.drag-element {
    background: var(--background);
}
/* Dragging field background */
.field.being-dragged {
    background: var(--background);
    border: 1px solid var(--primary);
}
/* Widget drop target */
.drop-zone.drag-over::before {
    border-color: var(--primary) !important;
    background: var(--background) !important;
}
.drop-zone.drag-over::after {
    background: var(--primary) !important;
}

/*
 * Toolbar
 */
/* Toolbar drag handle */
.tdWidgetContainer .toolbar.designmode .dragHandle {
    --color: var(--on-surface);
}
/* delete button */
.tdWidgetContainer .toolbar.designmode button.iconed[data-handle="removeWidget"] {
    --color: var(--on-surface);
}
.tdWidgetContainer .toolbar.designmode button.iconed[data-handle="removeWidget"]:hover {
    --color: var(--primary);
}
.tdWidgetContainer .toolbar.designmode button.iconed[data-handle="removeWidget"] .icon {
    color: var(--color);
}
.tdWidgetContainer .toolbar.designmode button.iconed[data-handle="removeWidget"]:focus {
    outline: 2px solid var(--on-surface);
    outline-offset: -4px;
}
/* Extra actions */
.tdWidgetContainer .toolbar.designmode .dropdown.item {
    --color: var(--on-surface);
    color: var(--color);
}
.tdWidgetContainer .toolbar.designmode .dropdown.item:hover {
    --color: var(--primary);
}
.tdWidgetContainer .toolbar.designmode .dropdown.item:focus-visible {
    outline: 2px solid var(--on-surface);
    outline-offset: 2px;
}
.tdWidgetContainer .toolbar.designmode .dropdown.item .icon {
    color: var(--color);
}
.tdWidgetContainer .toolbar.designmode .dropdown.item.active {
    --color: var(--surface);
    background: var(--on-surface);
}
.tdWidgetContainer .toolbar.designmode .dropdown.item .menu .item {
    background: var(--surface);
    color: var(--on-surface);

    padding: 6px;
}
.tdWidgetContainer .toolbar.designmode .dropdown.item .menu .item:hover {
    background: var(--on-surface);
    color: var(--surface);
}
.tdWidgetContainer .toolbar.designmode .dropdown.item .menu .item.disabled {
    background: var(--disabled);
    color: var(--on-disabled);
}

/*
 * Layout toggle button
 */
card-header .toolbars .toolbar .split.buttons .tdButton.toggle.active { /* Design mode layout toggle */
    background: var(--disabled) !important;
    color: var(--on-disabled) !important;
    border-color: var(--on-disabled) !important;
    z-index: -1; /* Prefer the border of non-disabled buttons */
}

/*
 * Mandatory toggle on fields
 */
.tdWidgetContainer[data-handle="fieldSetWidget"] .fieldset.widget .field .toggle.mandatory {
    --bg: var(--background);
    --color: var(--on-background);
    --border-color: var(--on-background);

    background: var(--bg);
    border-color: var(--border-color);
}
.tdWidgetContainer[data-handle="fieldSetWidget"] .fieldset.widget .field .toggle.mandatory.active {
    --bg: var(--background);
    --color: var(--error);
    --border-color: var(--error);
}
.tdWidgetContainer[data-handle="fieldSetWidget"] .fieldset.widget .field .toggle.mandatory:hover {
    --bg: var(--on-background);
    --color: var(--background);
    --border-color: var(--on-background);
}
.tdWidgetContainer[data-handle="fieldSetWidget"] .fieldset.widget .field .toggle.mandatory:active {
    --bg: var(--surface);
    --color: var(--on-surface);
    --border-color: var(--on-surface);
}
.tdWidgetContainer[data-handle="fieldSetWidget"] .fieldset.widget .field .toggle.mandatory::before {
    color: var(--color);
}
.tdWidgetContainer[data-handle="fieldSetWidget"] .fieldset.widget .field .toggle.mandatory:focus-visible {
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
}

/*
 * Field selection
 */
.tdWidgetContainer[data-handle="fieldSetWidget"] .fieldset.widget .field:focus {
    outline: 2px solid var(--on-background);
    outline-offset: 2px;
}
.tdWidgetContainer[data-handle="fieldSetWidget"] .fieldset.widget .field {
    border: 1px solid transparent;
}
.tdWidgetContainer[data-handle="fieldSetWidget"] .fieldset.widget .field.selectedForEditing {
    background: var(--background);
    border: 1px solid var(--primary);
}
.tdWidgetContainer[data-handle="fieldSetWidget"] .fieldset.widget .field:hover {
    background: var(--background);
    border: 1px solid var(--on-background);
}

/*
 * Grid widget
 */
.tdWidgetContainer[data-handle="gridWidget"] .gridWidget.widget .fieldset.widget {
    border-top: 1px solid var(--on-surface);
}
.tdWidgetContainer[data-handle="gridWidget"] .gridWidget.widget .fieldset.widget .field.draggable {
    --color: var(--on-surface); /* takes care of the drag-handle color as well */
    background: var(--surface);
    border-color: var(--on-surface);
}
.tdWidgetContainer[data-handle="gridWidget"] .gridWidget.widget .fieldset.widget .field.draggable:focus {
    outline: 2px solid var(--on-surface);
    outline-offset: -4px;
}
.tdWidgetContainer[data-handle="gridWidget"] .gridWidget.widget .fieldset.widget .field.draggable.drop-zone.drag-over {
    box-shadow: -2px 0 0 var(--primary) !important;
}
.tdWidgetContainer[data-handle="gridWidget"] .gridWidget .field label {
    color: var(--color);
}

/*
 * Workarea
 */
/* Suggest field items */
.tdWidgetContainer .workareas .workarea .fields.fields.suggestField a.label {
    --bg: var(--background);
    --color: var(--on-background);
    --border-color: var(--on-background);

    background: var(--background);
    color: var(--on-background);
    border-color: var(--on-background);
}
.tdWidgetContainer .workareas .workarea .fields.fields.suggestField a.label > .icon::before {
    color: var(--on-background);
}
.tdWidgetContainer .workareas .workarea .fields.fields.suggestField a.label > .icon:hover::before {
    color: var(--primary);
}
/* Field id description */
.tdWidgetContainer .workareas .workarea .fieldID .fields span:is(.label, .value) {
    color: var(--on-surface);
}
/* Add/create field switch */
.tdWidgetContainer .workareas .workarea .addcreate-switch > label {
    color: var(--on-surface);
}
.tdWidgetContainer .workareas .workarea .addcreate-switch > label.active {
    color: var(--primary);
}
.tdWidgetContainer .workareas .workarea .addcreate-switch .toggle label {
    background: var(--on-background) !important;
}
.tdWidgetContainer .workareas .workarea .addcreate-switch .toggle label::before {
    background: var(--background) !important;
}
.tdWidgetContainer .workareas .workarea .addcreate-switch .toggle label::after {
    background: var(--on-background) !important;
    margin-left: revert !important;

    /* Replace switch transition with a more performant one */
    transition: transform 0.2s ease-in-out !important;
}
.tdWidgetContainer .workareas .workarea .addcreate-switch .toggle input[type="checkbox"]:checked + label::after {
    transform: translateX(24px);
}
/* Inline field drop down field type icons */
.tdWidgetContainer .workareas .workarea .field .fields .inline-dropdown .text > .icon,
.tdWidgetContainer .workareas .workarea .field .fields .inline-dropdown .menu .item > .icon {
    color: var(--color);
}

/*
 * General widget
 */
/* General widget numbering example */
.tdWidgetContainer[data-handle="generalWidget"] .workareas .workarea .autonumberExample :is(.title, .example) {
    color: var(--on-surface);
}
/* Change icon grid */
.tdWidgetContainer[data-handle="generalWidget"] .workareas .workarea .body p {
    color: var(--on-surface);
}
.tdWidgetContainer[data-handle="generalWidget"] .workareas .workarea .body .list {
    background: var(--surface)
}
.tdWidgetContainer[data-handle="generalWidget"] .workareas .workarea .body .list .item {
    --color: var(--on-surface);
    border: none;
}
.tdWidgetContainer[data-handle="generalWidget"] .workareas .workarea .body .list .item:hover {
    background: var(--on-surface);
    --color: var(--surface);
}
.tdWidgetContainer[data-handle="generalWidget"] .workareas .workarea .body .list .item.selected {
    background: var(--primary);
    --color: var(--on-primary);
}
.tdWidgetContainer[data-handle="generalWidget"] .workareas .workarea .body .list .item:focus {
    outline: 2px solid var(--color);
    outline-offset: -4px;
}
.tdWidgetContainer[data-handle="generalWidget"] .workareas .workarea .body .list .item > :is(.content, .icon) {
    color: var(--color) !important;
}

/*
 * Web widget
 */
/* Web widget insert url part dropdown */
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton {
    --icon-bg: var(--background);
    --icon-fg: var(--on-background);
    --icon-border: var(--on-background);

    color: var(--on-surface);
}
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton:hover {
    --icon-bg: var(--on-background);
    --icon-fg: var(--background);
    --icon-border: var(--on-background);
}
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton:active {
    --icon-bg: var(--surface);
    --icon-fg: var(--on-surface);
    --icon-border: var(--on-background);
}
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton > .add.icon {
    background: var(--icon-bg);
    color: var(--icon-fg);
    border-color: var(--icon-border);
}
/* Web widget insert url part dropdown menu*/
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton .menu {
    background: var(--surface);
    border-color: var(--on-surface);
    padding: 0px 4px;
}
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton .menu::after {
    border-color: var(--on-surface);
}
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton .menu .footer {
    background: var(--surface);
    border-bottom-left-radius: 4px;
    border-bottom-right-radius: 4px;
    border: none;
}
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton .menu .dropdown-filter {
    background: var(--surface);
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
    border: none;
    padding: 16px 4px;

    z-index: 3; /* To hide the bottom of the pointer */
}
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton .menu .dropdown-filter input {
    background: var(--background);
    color: var(--on-background);
    border-color: var(--on-background);
}
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton .menu .dropdown-filter .search.icon,
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton .menu .dropdown-filter input::placeholder {
    color: var(--on-background);
}
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton .menu .dropdown-filter input:focus {
    outline: 2px solid var(--on-surface);
    outline-offset: 2px;
}
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton .menu .item {
    background: var(--surface);
    --color: var(--on-surface);
}
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton .menu .item :is(.icon, span) {
    color: var(--color);
}
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton .menu .item:hover {
    background: var(--on-surface);
    --color: var(--surface);
}
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .urlFields .tdActionButton .menu .item.selected {
    background: var(--primary);
    --color: var(--on-primary);
}
/* Web widget warning message */
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .footer .feedback .status {
    color: var(--on-surface);
}
.tdWidgetContainer[data-handle="webWidget"] .workareas .workarea .footer .feedback .icon {
    color: var(--on-surface);
    border-color: var(--on-surface);
}

/*
 * Add widget buttons
 */
/* Add widget button */
add-widget-dropdown .tdActionButton.inlineDropdown .button {
    --bg: var(--background);
    --color: var(--on-background);
    --border-color: var(--on-background);

    background: var(--bg) !important;
    border-color: var(--border-color) !important;
}
add-widget-dropdown .tdActionButton.inlineDropdown .button .displayText {
    color: var(--color) !important;
}
add-widget-dropdown .tdActionButton.inlineDropdown .button:hover {
    --bg: var(--on-background);
    --color: var(--background);
    --border-color: var(--on-background);
}
add-widget-dropdown .tdActionButton.inlineDropdown .button:active {
    --bg: var(--surface);
    --color: var(--on-surface);
    --border-color: var(--on-surface);
}
add-widget-dropdown .tdActionButton.inlineDropdown.active .button {
    --bg: var(--on-background);
    --color: var(--background);
    --border-color: var(--on-background);
}
/* Add widget menu */
add-widget-dropdown .tdActionButton.inlineDropdown .menu {
    background: var(--surface);
    border-color: var(--on-surface);
    padding: 0px 4px;
}
add-widget-dropdown .tdActionButton.inlineDropdown .menu::after {
    border-color: var(--on-surface);
}
add-widget-dropdown .tdActionButton.inlineDropdown:not(.upward) .menu {
    margin-top: 4px; /* Add some spacing between button and menu */
}
add-widget-dropdown .tdActionButton.inlineDropdown:not(.upward) .menu::after {
    top: -4px; /* Pointer is hiding behind the menu a bit */
}
add-widget-dropdown .tdActionButton.inlineDropdown.upward .menu {
    margin-bottom: 4px; /* Add some spacing between button and menu */
}
add-widget-dropdown .tdActionButton.inlineDropdown.upward .menu::after {
    bottom: -4px; /* Pointer is hiding behind the menu a bit */
}
add-widget-dropdown .tdActionButton.inlineDropdown .menu .footer {
    background: var(--surface);
    border-bottom-left-radius: 4px;
    border-bottom-right-radius: 4px;
    border: none;
}
add-widget-dropdown .tdActionButton.inlineDropdown .menu .dropdown-filter {
    background: var(--surface);
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
    border: none;
    padding: 16px 4px;

    z-index: 3; /* To hide the bottom of the pointer */
}
add-widget-dropdown .tdActionButton.inlineDropdown .menu .dropdown-filter input {
    background: var(--background);
    color: var(--on-background);
    border-color: var(--on-background);
}
add-widget-dropdown .tdActionButton.inlineDropdown .menu .dropdown-filter .search.icon,
add-widget-dropdown .tdActionButton.inlineDropdown .menu .dropdown-filter input::placeholder {
    color: var(--on-background);
}
add-widget-dropdown .tdActionButton.inlineDropdown .menu .dropdown-filter input:focus {
    outline: 2px solid var(--on-surface);
    outline-offset: 2px;
}
add-widget-dropdown .tdActionButton.inlineDropdown .menu .items .header {
    background: var(--background);
    color: var(--on-background);
}
add-widget-dropdown .tdActionButton.inlineDropdown .menu .items .item {
    background: var(--surface);
    color: var(--on-surface);
}
add-widget-dropdown .tdActionButton.inlineDropdown .menu .items .item:hover {
    background: var(--on-surface);
    color: var(--surface);
}
add-widget-dropdown .tdActionButton.inlineDropdown .menu .items .item.selected {
    background: var(--primary);
    color: var(--on-primary);
}